// data model generated by AI don't trust

// Customer/Policyholder Information
export interface Customer {
    id: string;
    name: string;
    email: string;
    phone: string;
    address: Address;
    policyNumber: string;
    insuranceCompany: string;
  }
  
  export interface Address {
    street: string;
    city: string;
    state: string;
    zipCode: string;
    country: string;
    latitude?: number;
    longitude?: number;
  }
  
  // Hail Damage Claim Information
  export interface HailDamageClaim {
    id: string;
    claimNumber: string;
    customerId: string;
    dateOfLoss: string; // ISO date string
    dateReported: string; // ISO date string
    description: string;
    status: ClaimStatus;
    priority: ClaimPriority;
    property: Property;
    damageAssessment?: DamageAssessment;
    photos: Photo[];
    videos?: Video[];
    documents?: Document[];
    adjuster?: Adjuster;
    estimatedCost?: number;
    approvedAmount?: number;
    createdAt: string;
    updatedAt: string;
  }
  
  export enum ClaimStatus {
    PENDING = 'PENDING',
    UNDER_REVIEW = 'UNDER_REVIEW',
    APPROVED = 'APPROVED',
    DENIED = 'DENIED',
    PAID = 'PAID',
    CLOSED = 'CLOSED'
  }
  
  export enum ClaimPriority {
    LOW = 'LOW',
    MEDIUM = 'MEDIUM',
    HIGH = 'HIGH',
    URGENT = 'URGENT'
  }
  
  // Property Information
  export interface Property {
    id: string;
    address: Address;
    propertyType: PropertyType;
    yearBuilt: number;
    roofingMaterial: RoofingMaterial;
    roofAge: number;
    roofArea: number; // square feet
    stories: number;
    lastInspectionDate?: string;
  }
  
  export enum PropertyType {
    SINGLE_FAMILY = 'SINGLE_FAMILY',
    MULTI_FAMILY = 'MULTI_FAMILY',
    COMMERCIAL = 'COMMERCIAL',
    APARTMENT = 'APARTMENT',
    CONDO = 'CONDO'
  }
  
  export enum RoofingMaterial {
    ASPHALT_SHINGLE = 'ASPHALT_SHINGLE',
    METAL = 'METAL',
    TILE = 'TILE',
    SLATE = 'SLATE',
    WOOD_SHAKE = 'WOOD_SHAKE',
    RUBBER = 'RUBBER',
    OTHER = 'OTHER'
  }
  
  // Damage Assessment
  export interface DamageAssessment {
    id: string;
    claimId: string;
    assessmentDate: string;
    overallSeverity: DamageSeverity;
    affectedAreas: DamagedArea[];
    totalDamageArea: number; // square feet
    estimatedRepairCost: number;
    replacementRequired: boolean;
    notes: string;
    assessor: Adjuster;
  }
  
  export enum DamageSeverity {
    MINIMAL = 'MINIMAL',
    MODERATE = 'MODERATE',
    SEVERE = 'SEVERE',
    TOTAL_LOSS = 'TOTAL_LOSS'
  }
  
  export interface DamagedArea {
    id: string;
    areaType: RoofArea;
    damageType: DamageType[];
    severity: DamageSeverity;
    size: number; // square feet
    description: string;
    photoIds: string[];
  }
  
  export enum RoofArea {
    SHINGLES = 'SHINGLES',
    GUTTERS = 'GUTTERS',
    FLASHING = 'FLASHING',
    CHIMNEY = 'CHIMNEY',
    VENTS = 'VENTS',
    SKYLIGHTS = 'SKYLIGHTS',
    EAVES = 'EAVES'
  }
  
  export enum DamageType {
    IMPACT_DAMAGE = 'IMPACT_DAMAGE',
    GRANULE_LOSS = 'GRANULE_LOSS',
    CRACKING = 'CRACKING',
    DENTING = 'DENTING',
    MISSING_PIECES = 'MISSING_PIECES',
    WATER_DAMAGE = 'WATER_DAMAGE'
  }
  
  // Media and Documentation
  export interface Photo {
    id: string;
    claimId: string;
    url: string;
    storageKey: string; // reference to storage bucket
    thumbnail?: string;
    caption?: string;
    takenAt: string;
    uploadedAt: string;
    uploadedBy: string;
    metadata: PhotoMetadata;
    aiAnalysis?: AIAnalysis;
  }
  
  export interface PhotoMetadata {
    fileName: string;
    fileSize: number;
    width: number;
    height: number;
    format: string;
    location?: {
      latitude: number;
      longitude: number;
    };
    device?: string;
    cameraMake?: string;
    cameraModel?: string;
  }
  
  export interface Video {
    id: string;
    claimId: string;
    url: string;
    storageKey: string;
    duration: number; // seconds
    uploadedAt: string;
    uploadedBy: string;
    metadata: VideoMetadata;
  }
  
  export interface VideoMetadata {
    fileName: string;
    fileSize: number;
    width: number;
    height: number;
    format: string;
    bitrate: number;
  }
  
  export interface Document {
    id: string;
    claimId: string;
    url: string;
    storageKey: string;
    documentType: DocumentType;
    fileName: string;
    fileSize: number;
    uploadedAt: string;
    uploadedBy: string;
  }
  
  export enum DocumentType {
    POLICE_REPORT = 'POLICE_REPORT',
    WEATHER_REPORT = 'WEATHER_REPORT',
    RECEIPT = 'RECEIPT',
    ESTIMATE = 'ESTIMATE',
    PROOF_OF_LOSS = 'PROOF_OF_LOSS',
    OTHER = 'OTHER'
  }
  
  // AI Analysis
  export interface AIAnalysis {
    id: string;
    photoId: string;
    analyzedAt: string;
    confidence: number; // 0-1
    detectedDamage: DetectedDamage[];
    damageArea: number; // square feet
    severity: DamageSeverity;
    recommendations: string[];
  }
  
  export interface DetectedDamage {
    type: DamageType;
    confidence: number;
    boundingBox: BoundingBox;
    description: string;
  }
  
  export interface BoundingBox {
    x: number;
    y: number;
    width: number;
    height: number;
  }
  
  // Adjuster Information
  export interface Adjuster {
    id: string;
    name: string;
    email: string;
    phone: string;
    licenseNumber: string;
    company: string;
    specializations: string[];
    activeRegions: string[];
  }
  
  // Storage bucket configuration
  export interface StorageConfig {
    bucketName: string;
    region: string;
    accessKeyId: string;
    secretAccessKey: string;
    maxFileSize: number;
    allowedFileTypes: string[];
  }
  
  // API Response types
  export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: ApiError;
    pagination?: Pagination;
  }
  
  export interface ApiError {
    code: string;
    message: string;
    details?: Record<string, any>;
  }
  
  export interface Pagination {
    page: number;
    pageSize: number;
    total: number;
    totalPages: number;
  }
  
  // Input types for creating/updating entities
  export type CreateClaimInput = Omit<HailDamageClaim, 'id' | 'createdAt' | 'updatedAt' | 'status'>;
  export type UpdateClaimInput = Partial<Omit<HailDamageClaim, 'id' | 'createdAt'>>;
  export type CreateCustomerInput = Omit<Customer, 'id'>;
  export type UpdateCustomerInput = Partial<Omit<Customer, 'id'>>;